What is a lambda expression?#

Java is an object-oriented language. By introducing lambdas in Java 8, the authors of Java tried to add elements of 
functional programming in Java. 

Now you might be wondering what the difference between object-oriented programming and functional programming is?

In object-oriented programming, objects and classes are the main entities. If we create a function then it should exist within a class. 
A function has no meaning outside the scope of the class object.

In functional programming, functions can exist outside the scope of an object. We can assign them to a reference variable and we can also 
pass them to other methods as a parameter.

A lambda expression is just an anonymous function, i.e., a function with no name and that is not bound to an identifier. We can pass it 
to other methods as parameters, therefore, using the power of functional programming in Java.

-----------------------------------------------------------------------------------------------------------------------------------------------

The Predicate<T> interface has an abstract method boolean test(T t). Basically, a predicate is a function that 
evaluates the given input and returns true or false.

------------------------------------------------------------------------------------------------------------------------------------------------

Supplier is an interface that does not take in any argument but produces a value when the get() function is invoked. 
Suppliers are useful when we don’t need to supply any value and obtain a result at the same time.

---------------------------------------------------------------------------------------------------------------------------------------------

Consumer<T>#
This interface takes a parameter of type T and does not return anything.

A consumer can be used in all contexts where an object needs to be consumed,i.e. taken as input, and some operation is 
performed on the object without returning any result.

Below is the list of methods in the Consumer interface. Consumer<T> has an abstract method accept() and a default method 
called andThen(), which is used for chaining.

-------------------------------------------------------------------------------------------------------------------------------------

Function<T, R>
R apply(T t)
compose(Function<? super V, ? extends T> before)
andThen(Function<? super R,? extends V> after)
BiFunction<T,U,R>

Function is a category of functional interfaces that takes an object of type T and returns an object of type R.

Until now, the functional interfaces that we’ve discussed have either not taken any argument(Supplier), not returned 
any value(Consumer), or returned only a boolean(Predicate).

Function interfaces are very useful as we can specify the type of input and output.

----------------------------------------------------------------------------------------------------------------------------------------

R apply(T t)#
This is the abstract method of the Function interface. It takes one argument of type T as input and returns a value of type R.

----------------------------------------------------------------------------------------------------------------------------------------

The UnaryOperator<T> interface represents a function that takes one argument of type T and returns a value of the same type. 
This is similar to the Function interface, which is a parent to the UnaryOperator interface.

The UnaryOperator does not define any new abstract methods. Since it extends the Function interface from the same 
package, it inherits the following method from the Function interface :

T apply(T t)

----------------------------------------------------------------------------------------------------------------------------------------

A Stream in Java can be defined as a sequence of elements from a source that supports aggregate operations on them. 
The source here refers to collections or arrays that provide data to a stream.

A few important points about streams are:

- A stream is not a data structure itself. It is a bunch of operations applied to a source. The source can be collections, 
arrays or I/O channels.
- Streams don’t change the original data structure.
- There can be zero or more intermediate operations that transform a stream into another stream.
- Each intermediate operation is lazily executed (This will be discussed later).
- Terminal operations produce the result of the stream.

---------------------------------------------------------------------------------------------------------------------------------------

Stream creation#

Streams can be created from different element sources, e.g., a collection or an array with the help of stream() and of() methods. 
Below are the different ways to create a stream.

a) Stream.of(v1, v2, v3….)#

import java.util.stream.Stream;

public class StreamDemo {

    public static void main(String[] args)
    {
        Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
        stream.forEach(p -> System.out.println(p));
    }
}

b) List.stream()#

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class StreamDemo {

    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        list.add("d");

        Stream<String> stream = list.stream();
        stream.forEach(p -> System.out.println(p));
    }
}

-----------------------------------------------------------------------------------------------------------------------------

The Stream interfaces#

The Stream API defines a few interfaces such as Stream, IntStream, LongStream, etc.

The Stream<T> interface is for object elements. For primitives, it defines IntStream, LongStream and DoubleStream interfaces.

It is a good practice to use primitive streams if you are dealing with primitives because wrapping primitives 
to objects and auto-boxing is a costly process.

---------------------------------------------------------------------------------------------------------------------------------

Intermediate operations#

These methods do not produce any results. They usually accept functional interfaces as parameters and always 
return a new stream. Some examples of intermediate operations are filter(), map(), etc.

Terminal operations#

These methods produce some results, e.g., count(), toArray(..), and collect(..).

The streams operations can be further classified as:

filtering
slicing
mapping
matching and finding
reduction
collect

----------------------------------------------------------------------------------------------------------------------------------

Stream flatMap() method is used to flatten a stream of collections to a stream of elements combined from all collections.

Basically, flatMap() is used to do following operation:

Stream<String[]> -> flatMap -> Stream<String>

Stream<Set<String>> -> flatMap -> Stream<String>

Stream<List<String>> -> flatMap -> Stream<String>

Now, the question is why do we need to flatten our stream? The reason is that intermediate methods such as filter() 
and distinct() do not work on streams of Collections.

These methods only work on streams of primitives or objects. So, we need to flatten our stream before using these intermediate 
functions.

----------------------------------------------------------------------------------------------------------------------------------------

Java 8 has introduced a new class Optional<T> in the java.util package.

The Optional<T> is a wrapper class that stores an object of type T. The object may or may not be present in the optional.

According to Oracle, “Java 8 Optional works as a container type for the value which is probably absent or null. 
Java Optional is a final class present in the java.util package.”

-----------------------------------------------------------------------------------------------------------------------------------------

Different ways of creating an Optional#
There are three different ways of creating an Optional object.

1) Using empty() method.#

We can create an empty optional using the empty() method. The optional created through empty() will contain a null value.

Optional < Person > person = Optional.empty();

2) Using of() method#

We can create an Optional object that has a non-null value using of() method. If we create an Optional 
using the of() method and the value is null, then it will throw a Null Pointer Exception.

To create an Optional using the of() method, when you are really sure that the value is not null, do the following.

Person person = new Person();

Optional<Person> optional = Optional.of(person);

3) Using ofNullable() method#

If while creating the Optional, you are not sure if the value is null or not null, then use the 
ofNullable() method. If a non-null value is passed in Optional.ofNullable(), then it will return 
the Optional, containing the specified value. Otherwise, it will return an empty Optional.

Person person = new Person();

Optional<Person> optional = Optional.ofNullable(person);

-------------------------------------------------------------------------------------------------------------------------------------

